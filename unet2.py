# -*- coding: utf-8 -*-
"""Unet2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cH1PRn_2dio7zKV6ygevVx4wtL2oiYKN
"""

from google.colab import drive
drive.mount('/content/drive')

import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
import torch.nn.functional as F
import torch.optim as optim       #For loss function
import matplotlib.pyplot as plt
import numpy as np               # functions to show an image
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
from torch.utils.data import DataLoader

print(device)

train_x = torch.load('/content/drive/MyDrive/Data/Copy of Train_X_224.pt')
train_y = torch.load('/content/drive/MyDrive/Data/Copy of Train_y_224.pt')
train_Data = torch.utils.data.TensorDataset(train_x,train_y)
train_Loader = DataLoader(train_Data, batch_size=128, shuffle=False, drop_last=False)

test_x = torch.load('/content/drive/MyDrive/Data/Copy of X_small.pt')
test_y = torch.load('/content/drive/MyDrive/Data/Copy of y_small.pt')
test_Data = torch.utils.data.TensorDataset(test_x,test_y)
test_Loader = DataLoader(test_Data, batch_size=64, shuffle=False, drop_last=False)

model= torch.hub.load('mateuszbuda/brain-segmentation-pytorch', 'unet',
    in_channels=3, out_channels=1, init_features=32, pretrained=True).to(device)
model.load_state_dict(torch.load('/content/drive/MyDrive/Data/Trained_Unet2'))
model.eval()

def epoch(loader, model, opt=None):  # Giving opt will put in a "testing" mode, will only need to test once
  total_loss = 0.
  for X,y in loader:
    #Load data
    X,y = X.to(device),y.to(device)
    #Get model output
    y_pred = model(X)
    #Get Loss
    loss = torch.sqrt(torch.sum((y_pred-y).pow(2))) #L2 distance
    if opt:
      opt.zero_grad()
      loss.backward()
      opt.step()
    total_loss += loss
  return total_loss/len(loader)

optimizer = optim.Adam(model.parameters(), lr=0.001) # Change lr to lr=0.0001   6/28/2023
for _ in range(20):
  train_loss = epoch(train_Loader, model, optimizer)
  print(train_loss)

#Testing
for _ in range(20):
  test_loss = epoch(test_Loader, model, None)
  print(test_loss)

# Saving model
torch.save(model.state_dict(), '/content/drive/MyDrive/Data/Trained_Unet2')